var lines=sc.parallelize(List("this is good good"))
lines.flatMap(_.split("\\s+")).map((_,1)).groupByKey.collect
val a = sc.parallelize(List("dog", "tiger", "lion", "cat", "spider", "eagle"), 2)
val b = a.keyBy(_.length)
b.groupByKey.collect
var lines=sc.parallelize(List("this is good good"))
var r2=lines.flatMap(_.split("\\s+")).map((_,1)).groupBy(t=>t._1)
var r3=lines.flatMap(_.split("\\s+")).map((_,1)).groupBy(t=>t._1).map(t=>(t._1,t._2.size)).collect
val a = sc.parallelize(1 to 9, 3)
val r3= a.groupBy(x => { if (x % 2 == 0) "even" else "odd" }).collect
var lines=sc.parallelize(List("this is good good"))
val r1=lines.flatMap(_.split("\\s+")).map((_,1)).reduceByKey(_+_).collect
var lines=sc.parallelize(List("this is good good"))
val rr=lines.flatMap(_.split("\\s+")).map((_,1)).aggregateByKey(0)(_+_,_+_).collect
val rdd = sc.parallelize(List((1,3),(1,2),(1,4),(2,3),(3,6),(3,8)),3)
val agg = rdd.aggregateByKey(0)(math.max(_,_),_+_)
agg.collect()
agg.partitions.size
val rdd = sc.parallelize(List((1,3),(1,2),(1,4),(2,3),(3,6),(3,8)),1)
val agg = rdd.aggregateByKey(0)(math.max(_,_),_+_).collect()
var lines=sc.parallelize(List("this is good good"))
lines.flatMap(_.split("\\s+")).map((_,1)).aggregateByKey(0)(_+_,_+_).sortByKey(true).collect
lines.flatMap(_.split("\\s+")).map((_,1)).aggregateByKey(0)(_+_,_+_).sortByKey(false).collect
var lines=sc.parallelize(List("this is good good"))
lines.flatMap(_.split("\\s+")).map((_,1)).aggregateByKey(0)(_+_,_+_).sortBy(_._2,false).collect
lines.flatMap(_.split("\\s+")).map((_,1)).aggregateByKey(0)(_+_,_+_).sortBy(t=>t,false).collect
